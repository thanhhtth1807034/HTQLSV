@model PagedList.IPagedList<HTQLSV.Models.Student>
@*@model List<HTQLSV.Models.Student>*@
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Student Index";
    //var totalPage = (int) ViewBag.TotalPage;
    //var limit = (int) ViewBag.Limit;
    //var currentPage = (int) ViewBag.CurrentPage;
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>

@using (Html.BeginForm("Index", "Students", FormMethod.Get))
{
    <p>
        Search : @Html.TextBox("SearchKeyword")
        <input type="submit" value="Search" />
        <a href="/Students/Index"> Back to Full List</a>
    </p>
}

@using (Html.BeginForm("Index", "Students", FormMethod.Get))
{
    @*<div>
        From Date: @Html.TextBox("fromDate", null, new { @class = "datefield", type = "date" })
            To Date: @Html.TextBox("toDate", null, new { @class = "datefield", type = "date" })
            <input type="submit" value="search" />
    </div>*@
<div id="reportrange" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 100%">
    <i class="fa fa-calendar"></i>&nbsp;
    <span></span> <i class="fa fa-caret-down"></i>
    Start at: @ViewBag.start - End at: @ViewBag.end
</div>

}
<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Full Name", "Index", new { SortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Email", "Index", new { SortOrder = ViewBag.EmailSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Created At", "Index", new { SortOrder = ViewBag.DateSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.DisplayNameFor(model => model.First().Status)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.FullName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CreatedAt)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Status)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.RollNumber }) |
                @Html.ActionLink("Details", "Details", new { id = item.RollNumber }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.RollNumber })
                @Html.ActionLink("Delete With Ajax", "Delete", new { id = item.RollNumber },
                    new { @class = "btn btn-danger btn-delete", @id = "delete-" + item.RollNumber })
            </td>
        </tr>
    }

</table>

@*<div>
        <strong>Page @currentPage of @totalPage</strong>
    </div>

    <nav aria-label="Page navigation">
        <ul class="pagination">
            @if (currentPage > 1)
            {
                <li>
                    <a href="?page=@(currentPage - 1)&limit=@limit" aria-label="First">
                        <span aria-hidden="true">First</span>
                    </a>
                </li>
                <li>
                    <a href="?page=@(currentPage - 1)&limit=@limit" aria-label="Previous">
                        <span aria-hidden="true">Previous</span>
                    </a>
                </li>
            }
            @if (currentPage > 2)
            {
                <li>
                    <a href="?page=@(currentPage-2)&limit=@limit">@(currentPage - 2)</a>
                </li>
            }
            @if (currentPage > 1)
            {
                <li><a href="?page=@(currentPage-1)&limit=@limit">@(currentPage - 1)</a></li>
            }
            <li class="active"><a href="#">@currentPage</a></li>
            @if (totalPage - currentPage >= 1)
            {
                <li>
                    <a href="?page=@(currentPage+1)&limit=@limit">@(currentPage + 1)</a>
                </li>
            }
            @if (totalPage - currentPage >= 2)
            {
                <li><a href="?page=@(currentPage+2)&limit=@limit">@(currentPage + 2)</a></li>
            }
            @if (currentPage < totalPage)
            {
                <li>
                    <a href="?page=@(currentPage + 1)&limit=@limit" aria-label="Next">
                        <span aria-hidden="true">Next</span>
                    </a>
                </li>
                <li>
                    <a href="?page=@(currentPage + 1)&limit=@limit" aria-label="Last">
                        <span aria-hidden="true">Last</span>
                    </a>
                </li>
            }
        </ul>
    </nav>*@
<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))

@Html.AntiForgeryToken()

@section scripts
{
    

    <script type="text/javascript">
        $(function() {

            var start = moment().subtract(29, 'days');
            var end = moment();

            //function cb(start, end) {
            //    //$('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
            //}

            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            });
            $('#reportrange').on('apply.daterangepicker',
                function(ev, picker) {
                    window.location.href =
                        `/Students/Index/?start=${picker.startDate.format('MM/DD/YYYY')}&end=${picker.endDate
                        .format('MM/DD/YYYY')}`;
                });
        });
    </script>


    <script type="text/javascript" src="https://cdn.jsdelivr.net/jquery/latest/jquery.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />

    <script>
        $(document).ready(function () {
            $('.btn-delete').click(function () {
                var id = $(this).attr("id").replace("delete-", "");
                if (confirm("Are you sure want to delete this student?")) {
                    var token = $('input[name="__RequestVerificationToken"]').val();
                    $.ajax({
                        url: "/Students/Delete/" + id,
                        type: "POST",
                        data: {
                            __RequestVerificationToken: token
                        },
                        success: function (data) {
                            alert("Delete success!");
                            window.location.reload();
                        },
                        error: function (error) {
                            alert("Action fails! Please try again!");
                        }
                    });
                }
                return false;
            });
        })
    </script>

    <script>
        $(document).ready(function () {
            var $input = $('.typeahead');
            $input.typeahead({
                autoSelect: true,
                items: 3,
                source: function (query, process) {
                    $.ajax({
                        url: '/Students/GetListStudentData',
                        type: 'Get',
                        success: function (response) {
                            $.each(response,
                                function () {
                                    this.name = this.RollNumber + " - " + this.FullName;
                                });
                            return process(response);
                        }
                    });
                }
            });
            $input.change(function () {
                var current = $input.typeahead("getActive");
                if (current) {
                    // Some item from your model is active!
                    if (current.name == $input.val()) {
                        $('#studentId').val(current.RollNumber);
                    } else {
                        // This means it is only a partial match, you can either add a new item
                        // or take the active if you don't want new items
                    }
                } else {
                    // Nothing is active so it is a new value (or maybe empty value)
                }
            });
        })
    </script>
}
